/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package net.monofraps.profiler.agent

import net.monofraps.profiler.agent.reporter.HttpReporter
import java.time.Duration
import java.util.*
import java.util.concurrent.Executors
import java.util.concurrent.ScheduledExecutorService
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.TimeUnit

class Profiler {
    private val executor: ScheduledExecutorService = Executors.newSingleThreadScheduledExecutor { runnable ->
        val thread = Thread(runnable, "Profiler-Sampler")
        thread.isDaemon = true
        thread
    }

    private val reportingDir = Files.createTempDirectory("profiler-agent")
    private val reporter = FileReporter(reportingDir)

//    private val reporter = HttpReporter("http://localhost:8080")

    private val samplingInterval = Duration.ofSeconds(1)
    private val profilingCommand: ProfilingCommand = ProfilingCommand(UUID.randomUUID(), reporter, Duration.ofSeconds(10))
    private var profilingTask: ScheduledFuture<*>? = null


    fun start() {
        scheduleProfilingCommand()
    }

    fun stop() {
        profilingTask?.cancel(false)
    }

    private fun scheduleProfilingCommand() {
        profilingTask = executor.scheduleWithFixedDelay(
                { profilingCommand.profile() },
                samplingInterval.toNanos(),
                samplingInterval.toNanos(),
                TimeUnit.NANOSECONDS
        )
    }
}
